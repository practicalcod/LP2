import heapq

def prim_mst(graph):
    start_node = list(graph.keys())[0]  
    visited = set()
    mst = []
    min_heap = [(0, start_node, None)]  
    total_cost = 0

    while min_heap:
        weight, current, parent = heapq.heappop(min_heap)
        if current not in visited:
            visited.add(current)
            total_cost += weight
            if parent:
                mst.append((parent, current, weight))
            for neighbor, w in graph[current]:
                if neighbor not in visited:
                    heapq.heappush(min_heap, (w, neighbor, current))

    return mst, total_cost

graph = {}
edges = int(input("Enter number of edges: "))
for _ in range(edges):
    u, v, w = input("Enter edge (start end weight): ").split()
    w = int(w)
    if u not in graph:
        graph[u] = []
    if v not in graph:
        graph[v] = []
    graph[u].append((v, w))
    graph[v].append((u, w))

mst, cost = prim_mst(graph)


print("\nMinimum Spanning Tree:")
for u, v, w in mst:
    print(f"{u} - {v} (Weight: {w})")
print(f"\nTotal cost of MST: {cost}")





# Enter number of edges: 5
# Enter edge (start end weight): A B 1
# Enter edge (start end weight): B C 3
# Enter edge (start end weight): A C 4
# Enter edge (start end weight): C D 2
# Enter edge (start end weight): B D 5
